/*
              // REACT STARTUP PROCESS ///
    1. YOU RUN THIS LINE OF CODE: const rootElement = document.getElementById('root');
THIS LINE OF CODE GETS A REFERENCE TO A DIV WITH THE ID OF ROOT.

    2. YOU RUN THIS LINE OF CODE: const roo = createRoot(rootElement);
THIS TELLS REACT THAT YOU WANT TO TAKE CONTROL OF THAT DIV AND RENDER OUR APP TO IT.

    3. YOU ARE TELLING REACT THAT YOU WANT TO RENDER YOUR APP COMPONENTS AND SHOW ALL JSX, TURN IT INTO HTML, AND SHOW IT IN THE ROOT DIV.
YOU RUN THIS LINE OF CODE: root.render(<App />);
------------------------------------------------------------------------------------------------------------------------
              //  WHAT ARE useState FUNCTIONS? //
THE useState IS A FUNCTION THAT WORKS WITH REACT'S state SYSTEM.
STATE IS LIKE A VARIABLE IN REACT.
WE MAKE use OF STATE TO STORE DATA THAT IS GOING TO CHANGE OVER TIME AS THE USER INTERACTS WITH THE APP.
ANY TIME WE UPDATE state, REACT IS GOING TO AUTOMATICALLY RE-RENDER THE COMPONENT THAT USES THAT STATE ON THE SCREEN.

           IN THE TRANSLATING APP EXAMPLE, THE APP HAD THREE PIECES OF DATA THAT CHANGED.
       1. THE TEXT THAT THE USER WAS TYPING IN THE INPUT FIELD.
       2. THE LANGUAGE THAT THE USER SELECTED FOR TRANSLATION.
       3. THE RESULT OF THE TRANSLATION.
   SO WE ARE ABLE TO FIND A SINGLE CALL TO THE useState FUNCTION TO SET UP EACH OF THESE PIECES OF DATA.
1. THE FIRST CALL TO useState SETS UP state SYSTEM AND SAYS THAT WE'RE GOING TO HAVE SOME KIND OF SELECTED LANGUAGE THAT IS GOING TO CHANGE OVER TIME.
    EX: const [language, setLanguage] = useState("es");
2. THE SECOND CALL TO useState SETS UP state SYSTEM AND SAYS THAT WE'RE GOING TO HAVE SOME KIND OF TEXT THAT IS GOING TO CHANGE OVER TIME.
    EX: const [text, setText] = useState("");
3. THE THIRD CALL TO useState SETS UP state SYSTEM AND SAYS THAT WE'RE GOING TO HAVE SOME KIND OF TRANSLATED TEXT THAT IS GOING TO CHANGE OVER TIME.
    EX: const [translated, setTranslated] = useState("");
------------------------------------------------------------------------------------------------------------------------
             // HOW DID THE TEXT GET TRANSLATED TO ANOTHER LANGUAGE? //
TWO PIECES OF DATA, THE ACTUAL TEXT FROM THE INPUTS AND THE SELECTED LANGUAGE INTO THE TRANSLATE COMPONENT.
THAT COMPONENT WAS SETUP TO WATCH FOR THOSE TWO VALUES TO CHANGE, AND WHEN THEY DID, IT WAS GOING TO MAKE A REQUEST TO THE GOOGLE TRANSLATE API.
ONCE THE TRANSLATE COMPONENT GOT A RESPONSE FROM THE API AND THEN DISPLAYED THE RESULT TO THE USER ON THE SCREEN.
------------------------------------------------------------------------------------------------------------------------
        TO GENERATE A NEW PROJECT WITH REACT, YOU RUN THIS LINE OF CODE:
        npX create-react-app <name of your project>

        YOUR PROJECT WILL BE INSIDE A NEW DIRECTORY WITH THE SAME NAME AS YOUR PROJECT.
        TO CHANGE INTO THAT DIRECTORY YOU RUN THIS LINE OF CODE:
        cd <name of your project>

        ONCE INSIDE THE PROJECT DIRECTORY, YOU CAN RUN THE FOLLOWING LINE OF CODE:
        npm start

        TO VIEW YOUR PROJECT IN THE BROWSER, YOU CAN OPEN localhost:3000 TO VIEW IT IN THE BROWSER.

        IF YOU EVER WANT TO STOP THE SERVER, YOU CAN PRESS CTRL + C IN THE TERMINAL.
------------------------------------------------------------------------------------------------------------------------



 */